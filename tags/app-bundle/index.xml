<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>app-bundle on eschmann.dev</title>
    <link>https://eschmann.dev/tags/app-bundle/</link>
    <description>Recent content in app-bundle on eschmann.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 11 Jun 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://eschmann.dev/tags/app-bundle/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>jpackage to the rescue (follow-up)</title>
      <link>https://eschmann.dev/posts/javafx-mac-os-custom-file-type-jpackage/</link>
      <pubDate>Thu, 11 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://eschmann.dev/posts/javafx-mac-os-custom-file-type-jpackage/</guid>
      <description>This serves as a short follow-up to the previous post. Since then, Java 14 was released and includes jpackage, improving on the previously suboptimal situation surrounding packaging java applications. In short, jpackage builds on top of jlink and automatically creates self-containing app bundles for each platform according to configuration. Previously, the bash launcher script generated by jlink was not capable of catching the native FILE_OPEN events emitted by macOS. The earlier post laid out a strategy of using an additional native launcher to solve that issue.</description>
    </item>
    
    <item>
      <title>Bundling JavaFX 12 on MacOS for a custom file extension using AppleScript</title>
      <link>https://eschmann.dev/posts/javafx-mac-os-custom-file-type/</link>
      <pubDate>Sun, 25 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://eschmann.dev/posts/javafx-mac-os-custom-file-type/</guid>
      <description>tldr: Link to Boilerplate on Github, see the follow-up post.
 I recently found myself in the position of wanting to bundle a small desktop application for interacting with a custom file type. It should recognise the file extension and be as minimal as possible, ideally acting as a thin layer on top of an existing code base. Said code base, to give some context, consists of a native c++ sdk and wrappers for mobile platforms.</description>
    </item>
    
  </channel>
</rss>