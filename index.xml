<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>eschmann.dev</title>
    <link>https://eschmann.dev/</link>
    <description>Recent content on eschmann.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 05 Apr 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://eschmann.dev/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Revisiting popcount on Postgres 14</title>
      <link>https://eschmann.dev/2023/04/revisiting-popcount-on-postgres-14/</link>
      <pubDate>Wed, 05 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://eschmann.dev/2023/04/revisiting-popcount-on-postgres-14/</guid>
      <description>Tl;dr: Skip to benchmark results.
With PostgreSQL version 14, the database management system introduced its own built-in SQL function for population count, called bit_count. That was not the case in 2018, when I was conducting some research based on bitwise encodings. MySQL did have a BIT_COUNT function limited to 64 bits, which did not suffice for my purposes, so I implemented my own extension based on common algorithms for the problem.</description>
    </item>
    
    <item>
      <title>Render SwiftUI animations to mp4 in Xcode playgrounds</title>
      <link>https://eschmann.dev/2023/03/render-xcode-playground-animation/</link>
      <pubDate>Wed, 01 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://eschmann.dev/2023/03/render-xcode-playground-animation/</guid>
      <description>I&amp;rsquo;ve found it convenient to prototype SwiftUI animations in Xcode playgrounds, to quickly render custom views without getting into creating an entire project. The result is a single file that is easily shareable code-wise. Sharing the visual result however, is not as easy. There is no built-in way of capturing the rendered output. Resorting to the various screen-recording apps out there does not yield the expected quality, but also seems like a round-about way, when already working with a rendering engine directly.</description>
    </item>
    
    <item>
      <title>The need for comments</title>
      <link>https://eschmann.dev/2022/12/no-need-for-comments/</link>
      <pubDate>Thu, 08 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://eschmann.dev/2022/12/no-need-for-comments/</guid>
      <description>There seems to be at least some friction in writing code comments. And recently I&amp;rsquo;ve come more often across the claim:
&amp;ldquo;If code is written clearly enough, there is no need for comments.&amp;rdquo;
In my opinion, code is a projection of your mental model of what you are working on at a specific point in time. The clearer your thoughts, the more precise the mental model and code. This means that a fair amount of big-picture thinking is a prerequisite, in order to produce a clear and concise code contribution.</description>
    </item>
    
    <item>
      <title>jpackage to the rescue (follow-up)</title>
      <link>https://eschmann.dev/2020/06/javafx-mac-os-custom-file-type-jpackage/</link>
      <pubDate>Thu, 11 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://eschmann.dev/2020/06/javafx-mac-os-custom-file-type-jpackage/</guid>
      <description>This serves as a short follow-up to the previous post. Since then, Java 14 was released and includes jpackage, improving on the previously suboptimal situation surrounding packaging java applications. In short, jpackage builds on top of jlink and automatically creates self-containing app bundles for each platform according to configuration. Previously, the bash launcher script generated by jlink was not capable of catching the native FILE_OPEN events emitted by macOS. The earlier post laid out a strategy of using an additional native launcher to solve that issue.</description>
    </item>
    
    <item>
      <title>Bundling JavaFX 12 on MacOS for a custom file extension using AppleScript</title>
      <link>https://eschmann.dev/2019/08/javafx-mac-os-custom-file-type/</link>
      <pubDate>Sun, 25 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://eschmann.dev/2019/08/javafx-mac-os-custom-file-type/</guid>
      <description>tldr: Link to Boilerplate on Github, see the follow-up post.
I recently found myself in the position of wanting to bundle a small desktop application for interacting with a custom file type. It should recognise the file extension and be as minimal as possible, ideally acting as a thin layer on top of an existing code base. Said code base, to give some context, consists of a native c++ sdk and wrappers for mobile platforms.</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://eschmann.dev/2019/08/hello-world/</link>
      <pubDate>Sun, 04 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://eschmann.dev/2019/08/hello-world/</guid>
      <description>This post serves as a timestamp for the start of my very own blog. Hopefully it will not dwell in solitude for long.</description>
    </item>
    
  </channel>
</rss>
